

; show line number
(global-linum-mode 1)


; package.el 
(load "~/.emacs.d/config/package-config.el")


; auto-complete config
;(load "~/.emacs.d/config/auto-complete-config.el")


; yasnippet config
;(load "~/.emacs.d/config/yasnippet-config.el")


; ido config
;(load "~/.emacs.d/config/ido-config.el")


; ido config
; switch buffer or for find-file command
;(load "~/.emacs.d/config/ido-config.el")


; CEDET config


; lisp debug config
;(load "~/.emacs.d/config/debug-config.el")


; linux kernel code style
;(load "~/.emacs.d/config/kernel.el")


; prevent the creation of backup files
(setq make-backup-files nil)

; style I want to use in c++ mode

(setq-default c-basic-offset 8)

(c-add-style "my-style" 
	     '("stroustrup"
	       (indent-tabs-mode . nil)        ; use spaces rather than tabs
	       (c-basic-offset . 8)            ; indent by four spaces
	       (c-offsets-alist . ((inline-open . 0)  ; custom indentation rules
				   (brace-list-open . 0)
				   (statement-case-open . +)))))

(defun my-c++-mode-hook ()
  (c-set-style "my-style")        ; use my-style defined above
  (auto-fill-mode)         
  (c-toggle-auto-hungry-state 1))

(add-hook 'c++-mode-hook 'my-c++-mode-hook)




(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 )
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(font-lock-function-name-face ((t (:foreground "blue")))))





; Stop TAB indent

;; make indentation commands use space only (never tab character)
(setq-default indent-tabs-mode nil) ; emacs 23.1, 24.2, default to t

;; set default tab char's display width to 4 spaces
(setq-default tab-width 8) ; emacs 23.1, 24.2, default to 8

;; set current buffer's tab char's display width to 4 spaces
(setq tab-width 8)

(defun insert-tab-char ()
  "insert a tab char. (ASCII 9, \t)"
  (interactive)
  (insert "\t")
)

(global-set-key (kbd "TAB") 'insert-tab-char) ; same as Ctrl+i




